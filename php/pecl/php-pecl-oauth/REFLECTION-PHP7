Extension [ <persistent> extension #71 OAuth version 2.0.2 ] {

  - Constants [32] {
    Constant [ string OAUTH_SIG_METHOD_HMACSHA1 ] { HMAC-SHA1 }
    Constant [ string OAUTH_SIG_METHOD_HMACSHA256 ] { HMAC-SHA256 }
    Constant [ string OAUTH_SIG_METHOD_RSASHA1 ] { RSA-SHA1 }
    Constant [ string OAUTH_SIG_METHOD_PLAINTEXT ] { PLAINTEXT }
    Constant [ integer OAUTH_AUTH_TYPE_AUTHORIZATION ] { 3 }
    Constant [ integer OAUTH_AUTH_TYPE_URI ] { 1 }
    Constant [ integer OAUTH_AUTH_TYPE_FORM ] { 2 }
    Constant [ integer OAUTH_AUTH_TYPE_NONE ] { 4 }
    Constant [ string OAUTH_HTTP_METHOD_GET ] { GET }
    Constant [ string OAUTH_HTTP_METHOD_POST ] { POST }
    Constant [ string OAUTH_HTTP_METHOD_PUT ] { PUT }
    Constant [ string OAUTH_HTTP_METHOD_HEAD ] { HEAD }
    Constant [ string OAUTH_HTTP_METHOD_DELETE ] { DELETE }
    Constant [ integer OAUTH_REQENGINE_STREAMS ] { 1 }
    Constant [ integer OAUTH_REQENGINE_CURL ] { 2 }
    Constant [ integer OAUTH_SSLCHECK_NONE ] { 0 }
    Constant [ integer OAUTH_SSLCHECK_HOST ] { 1 }
    Constant [ integer OAUTH_SSLCHECK_PEER ] { 2 }
    Constant [ integer OAUTH_SSLCHECK_BOTH ] { 3 }
    Constant [ integer OAUTH_OK ] { 0 }
    Constant [ integer OAUTH_BAD_NONCE ] { 4 }
    Constant [ integer OAUTH_BAD_TIMESTAMP ] { 8 }
    Constant [ integer OAUTH_CONSUMER_KEY_UNKNOWN ] { 16 }
    Constant [ integer OAUTH_CONSUMER_KEY_REFUSED ] { 32 }
    Constant [ integer OAUTH_INVALID_SIGNATURE ] { 64 }
    Constant [ integer OAUTH_TOKEN_USED ] { 128 }
    Constant [ integer OAUTH_TOKEN_EXPIRED ] { 256 }
    Constant [ integer OAUTH_TOKEN_REVOKED ] { 512 }
    Constant [ integer OAUTH_TOKEN_REJECTED ] { 1024 }
    Constant [ integer OAUTH_VERIFIER_INVALID ] { 2048 }
    Constant [ integer OAUTH_PARAMETER_ABSENT ] { 4096 }
    Constant [ integer OAUTH_SIGNATURE_METHOD_REJECTED ] { 8192 }
  }

  - Functions {
    Function [ <internal:OAuth> function oauth_urlencode ] {

      - Parameters [1] {
        Parameter #0 [ <required> $uri ]
      }
    }
    Function [ <internal:OAuth> function oauth_get_sbs ] {

      - Parameters [3] {
        Parameter #0 [ <required> $http_method ]
        Parameter #1 [ <required> $uri ]
        Parameter #2 [ <required> $parameters ]
      }
    }
  }

  - Classes [3] {
    Class [ <internal:OAuth> class OAuth ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> public $debug ]
        Property [ <default> public $sslChecks ]
        Property [ <default> public $debugInfo ]
      }

      - Methods [26] {
        Method [ <internal:OAuth, ctor> public method __construct ] {

          - Parameters [4] {
            Parameter #0 [ <required> $consumer_key ]
            Parameter #1 [ <required> $consumer_secret ]
            Parameter #2 [ <optional> $signature_method ]
            Parameter #3 [ <optional> $auth_type ]
          }
        }

        Method [ <internal:OAuth> public method setRSACertificate ] {

          - Parameters [1] {
            Parameter #0 [ <required> $cert ]
          }
        }

        Method [ <internal:OAuth> public method getRequestToken ] {

          - Parameters [2] {
            Parameter #0 [ <required> $request_token_url ]
            Parameter #1 [ <optional> $callback_url ]
          }
        }

        Method [ <internal:OAuth> public method getAccessToken ] {

          - Parameters [3] {
            Parameter #0 [ <required> $access_token_url ]
            Parameter #1 [ <optional> $auth_session_handle ]
            Parameter #2 [ <optional> $auth_verifier ]
          }
        }

        Method [ <internal:OAuth> public method getLastResponse ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:OAuth> public method getLastResponseInfo ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:OAuth> public method getLastResponseHeaders ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:OAuth> public method setToken ] {

          - Parameters [2] {
            Parameter #0 [ <required> $token ]
            Parameter #1 [ <required> $token_secret ]
          }
        }

        Method [ <internal:OAuth> public method setRequestEngine ] {

          - Parameters [1] {
            Parameter #0 [ <required> $reqengine ]
          }
        }

        Method [ <internal:OAuth> public method setVersion ] {

          - Parameters [1] {
            Parameter #0 [ <required> $version ]
          }
        }

        Method [ <internal:OAuth> public method setAuthType ] {

          - Parameters [1] {
            Parameter #0 [ <required> $auth_type ]
          }
        }

        Method [ <internal:OAuth> public method setNonce ] {

          - Parameters [1] {
            Parameter #0 [ <required> $nonce ]
          }
        }

        Method [ <internal:OAuth> public method setTimestamp ] {

          - Parameters [1] {
            Parameter #0 [ <required> $ts ]
          }
        }

        Method [ <internal:OAuth> public method fetch ] {

          - Parameters [4] {
            Parameter #0 [ <required> $protected_resource_url ]
            Parameter #1 [ <optional> $extra_parameters ]
            Parameter #2 [ <optional> $http_method ]
            Parameter #3 [ <optional> $request_headers ]
          }
        }

        Method [ <internal:OAuth> public method enableDebug ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:OAuth> public method disableDebug ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:OAuth> public method enableSSLChecks ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:OAuth> public method disableSSLChecks ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:OAuth> public method enableRedirects ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:OAuth> public method disableRedirects ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:OAuth> public method setCAPath ] {

          - Parameters [2] {
            Parameter #0 [ <required> $ca_path ]
            Parameter #1 [ <required> $ca_info ]
          }
        }

        Method [ <internal:OAuth> public method getCAPath ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:OAuth> public method generateSignature ] {

          - Parameters [3] {
            Parameter #0 [ <required> $http_method ]
            Parameter #1 [ <required> $url ]
            Parameter #2 [ <optional> $extra_parameters ]
          }
        }

        Method [ <internal:OAuth> public method setTimeout ] {

          - Parameters [1] {
            Parameter #0 [ <required> $timeout_in_milliseconds ]
          }
        }

        Method [ <internal:OAuth> public method setSSLChecks ] {

          - Parameters [1] {
            Parameter #0 [ <required> $sslcheck ]
          }
        }

        Method [ <internal:OAuth> public method getRequestHeader ] {

          - Parameters [3] {
            Parameter #0 [ <required> $http_method ]
            Parameter #1 [ <required> $url ]
            Parameter #2 [ <optional> $extra_parameters ]
          }
        }
      }
    }

    Class [ <internal:OAuth> class OAuthException extends Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [6] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
        Property [ <default> public $lastResponse ]
        Property [ <default> public $debugInfo ]
      }

      - Methods [10] {
        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }

    Class [ <internal:OAuth> class OAuthProvider ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [2] {
        Method [ <internal:OAuth> final static public method reportProblem ] {

          - Parameters [1] {
            Parameter #0 [ <required> $oauthexception ]
          }
        }

        Method [ <internal:OAuth> final static public method generateToken ] {

          - Parameters [2] {
            Parameter #0 [ <required> $size ]
            Parameter #1 [ <optional> $strong ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [14] {
        Method [ <internal:OAuth, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $params_array ]
          }
        }

        Method [ <internal:OAuth> public method consumerHandler ] {

          - Parameters [1] {
            Parameter #0 [ <required> $function_name ]
          }
        }

        Method [ <internal:OAuth> public method tokenHandler ] {

          - Parameters [1] {
            Parameter #0 [ <required> $function_name ]
          }
        }

        Method [ <internal:OAuth> public method timestampNonceHandler ] {

          - Parameters [1] {
            Parameter #0 [ <required> $function_name ]
          }
        }

        Method [ <internal:OAuth> public method callconsumerHandler ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:OAuth> public method calltokenHandler ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:OAuth> public method callTimestampNonceHandler ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:OAuth> public method checkOAuthRequest ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $uri ]
            Parameter #1 [ <optional> $method ]
          }
        }

        Method [ <internal:OAuth> public method isRequestTokenEndpoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $params_array ]
          }
        }

        Method [ <internal:OAuth> final public method setRequestTokenPath ] {

          - Parameters [1] {
            Parameter #0 [ <required> $path ]
          }
        }

        Method [ <internal:OAuth> final public method addRequiredParameter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $req_params ]
          }
        }

        Method [ <internal:OAuth> final public method setParam ] {

          - Parameters [2] {
            Parameter #0 [ <required> $param_key ]
            Parameter #1 [ <optional> $param_val ]
          }
        }

        Method [ <internal:OAuth> final public method removeRequiredParameter ] {

          - Parameters [1] {
            Parameter #0 [ <required> $req_params ]
          }
        }

        Method [ <internal:OAuth> public method is2LeggedEndpoint ] {

          - Parameters [1] {
            Parameter #0 [ <required> $params_array ]
          }
        }
      }
    }
  }
}

