Extension [ <persistent> extension #78 Stomp version 2.0.0 ] {

  - INI {
    Entry [ stomp.default_broker <ALL> ]
      Current = 'tcp://localhost:61613'
    }
    Entry [ stomp.default_username <ALL> ]
      Current = ''
    }
    Entry [ stomp.default_password <ALL> ]
      Current = ''
    }
    Entry [ stomp.default_read_timeout_sec <ALL> ]
      Current = '2'
    }
    Entry [ stomp.default_read_timeout_usec <ALL> ]
      Current = '0'
    }
    Entry [ stomp.default_connection_timeout_sec <ALL> ]
      Current = '2'
    }
    Entry [ stomp.default_connection_timeout_usec <ALL> ]
      Current = '0'
    }
  }

  - Functions {
    Function [ <internal:Stomp> function stomp_version ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:Stomp> function stomp_connect ] {

      - Parameters [4] {
        Parameter #0 [ <optional> $broker ]
        Parameter #1 [ <optional> $username ]
        Parameter #2 [ <optional> $password ]
        Parameter #3 [ <optional> array or NULL $headers ]
      }
    }
    Function [ <internal:Stomp> function stomp_connect_error ] {

      - Parameters [0] {
      }
    }
    Function [ <internal:Stomp> function stomp_get_session_id ] {

      - Parameters [1] {
        Parameter #0 [ <required> $link ]
      }
    }
    Function [ <internal:Stomp> function stomp_close ] {

      - Parameters [1] {
        Parameter #0 [ <required> $link ]
      }
    }
    Function [ <internal:Stomp> function stomp_send ] {

      - Parameters [4] {
        Parameter #0 [ <required> $link ]
        Parameter #1 [ <required> $destination ]
        Parameter #2 [ <required> $msg ]
        Parameter #3 [ <optional> array or NULL $headers ]
      }
    }
    Function [ <internal:Stomp> function stomp_subscribe ] {

      - Parameters [3] {
        Parameter #0 [ <required> $link ]
        Parameter #1 [ <required> $destination ]
        Parameter #2 [ <optional> array or NULL $headers ]
      }
    }
    Function [ <internal:Stomp> function stomp_has_frame ] {

      - Parameters [1] {
        Parameter #0 [ <required> $link ]
      }
    }
    Function [ <internal:Stomp> function stomp_read_frame ] {

      - Parameters [2] {
        Parameter #0 [ <required> $link ]
        Parameter #1 [ <optional> $class_name ]
      }
    }
    Function [ <internal:Stomp> function stomp_unsubscribe ] {

      - Parameters [3] {
        Parameter #0 [ <required> $link ]
        Parameter #1 [ <required> $destination ]
        Parameter #2 [ <optional> array or NULL $headers ]
      }
    }
    Function [ <internal:Stomp> function stomp_begin ] {

      - Parameters [3] {
        Parameter #0 [ <required> $link ]
        Parameter #1 [ <required> $transaction_id ]
        Parameter #2 [ <optional> array or NULL $headers ]
      }
    }
    Function [ <internal:Stomp> function stomp_commit ] {

      - Parameters [3] {
        Parameter #0 [ <required> $link ]
        Parameter #1 [ <required> $transaction_id ]
        Parameter #2 [ <optional> array or NULL $headers ]
      }
    }
    Function [ <internal:Stomp> function stomp_abort ] {

      - Parameters [3] {
        Parameter #0 [ <required> $link ]
        Parameter #1 [ <required> $transaction_id ]
        Parameter #2 [ <optional> array or NULL $headers ]
      }
    }
    Function [ <internal:Stomp> function stomp_ack ] {

      - Parameters [3] {
        Parameter #0 [ <required> $link ]
        Parameter #1 [ <required> $msg ]
        Parameter #2 [ <optional> array or NULL $headers ]
      }
    }
    Function [ <internal:Stomp> function stomp_nack ] {

      - Parameters [3] {
        Parameter #0 [ <required> $link ]
        Parameter #1 [ <required> $msg ]
        Parameter #2 [ <optional> array or NULL $headers ]
      }
    }
    Function [ <internal:Stomp> function stomp_error ] {

      - Parameters [1] {
        Parameter #0 [ <required> $link ]
      }
    }
    Function [ <internal:Stomp> function stomp_set_read_timeout ] {

      - Parameters [3] {
        Parameter #0 [ <required> $link ]
        Parameter #1 [ <required> $seconds ]
        Parameter #2 [ <optional> $microseconds ]
      }
    }
    Function [ <internal:Stomp> function stomp_get_read_timeout ] {

      - Parameters [1] {
        Parameter #0 [ <required> $link ]
      }
    }
  }

  - Classes [3] {
    Class [ <internal:Stomp> class Stomp ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [16] {
        Method [ <internal:Stomp, ctor> public method __construct ] {

          - Parameters [4] {
            Parameter #0 [ <optional> $broker ]
            Parameter #1 [ <optional> $username ]
            Parameter #2 [ <optional> $password ]
            Parameter #3 [ <optional> array or NULL $headers ]
          }
        }

        Method [ <internal:Stomp> public method getSessionId ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:Stomp, dtor> public method __destruct ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:Stomp> public method send ] {

          - Parameters [3] {
            Parameter #0 [ <required> $destination ]
            Parameter #1 [ <required> $msg ]
            Parameter #2 [ <optional> array or NULL $headers ]
          }
        }

        Method [ <internal:Stomp> public method subscribe ] {

          - Parameters [2] {
            Parameter #0 [ <required> $destination ]
            Parameter #1 [ <optional> array or NULL $headers ]
          }
        }

        Method [ <internal:Stomp> public method hasFrame ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:Stomp> public method readFrame ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $class_name ]
          }
        }

        Method [ <internal:Stomp> public method unsubscribe ] {

          - Parameters [2] {
            Parameter #0 [ <required> $destination ]
            Parameter #1 [ <optional> array or NULL $headers ]
          }
        }

        Method [ <internal:Stomp> public method begin ] {

          - Parameters [2] {
            Parameter #0 [ <required> $transaction_id ]
            Parameter #1 [ <optional> array or NULL $headers ]
          }
        }

        Method [ <internal:Stomp> public method commit ] {

          - Parameters [2] {
            Parameter #0 [ <required> $transaction_id ]
            Parameter #1 [ <optional> array or NULL $headers ]
          }
        }

        Method [ <internal:Stomp> public method abort ] {

          - Parameters [2] {
            Parameter #0 [ <required> $transaction_id ]
            Parameter #1 [ <optional> array or NULL $headers ]
          }
        }

        Method [ <internal:Stomp> public method ack ] {

          - Parameters [2] {
            Parameter #0 [ <required> $msg ]
            Parameter #1 [ <optional> array or NULL $headers ]
          }
        }

        Method [ <internal:Stomp> public method nack ] {

          - Parameters [2] {
            Parameter #0 [ <required> $msg ]
            Parameter #1 [ <optional> array or NULL $headers ]
          }
        }

        Method [ <internal:Stomp> public method error ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:Stomp> public method setReadTimeout ] {

          - Parameters [2] {
            Parameter #0 [ <required> $seconds ]
            Parameter #1 [ <optional> $microseconds ]
          }
        }

        Method [ <internal:Stomp> public method getReadTimeout ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:Stomp> class StompFrame ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [3] {
        Property [ <default> public $command ]
        Property [ <default> public $headers ]
        Property [ <default> public $body ]
      }

      - Methods [1] {
        Method [ <internal:Stomp, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $command ]
            Parameter #1 [ <optional> array or NULL $headers ]
            Parameter #2 [ <optional> $body ]
          }
        }
      }
    }

    Class [ <internal:Stomp> class StompException extends Exception implements Throwable ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [5] {
        Property [ <default> protected $message ]
        Property [ <default> protected $code ]
        Property [ <default> protected $file ]
        Property [ <default> protected $line ]
        Property [ <default> private $details ]
      }

      - Methods [11] {
        Method [ <internal:Stomp> public method getDetails ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:Core, inherits Exception, ctor> public method __construct ] {

          - Parameters [3] {
            Parameter #0 [ <optional> $message ]
            Parameter #1 [ <optional> $code ]
            Parameter #2 [ <optional> $previous ]
          }
        }

        Method [ <internal:Core, inherits Exception> public method __wakeup ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getMessage ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getCode ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getFile ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getLine ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTrace ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getPrevious ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> final public method getTraceAsString ] {
        }

        Method [ <internal:Core, inherits Exception, prototype Throwable> public method __toString ] {
        }
      }
    }
  }
}

